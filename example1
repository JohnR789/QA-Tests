async function onbdcpodiumgenbcp(){
    ///////////////////////////////////////////////////////////////////////////////////////////////
   //                                                                                             //
   // Script Name: onbdcpodiumconvbcp.js                                                          //
   // Written By:  Rollins 01/31/24                                                               //
   // Script Purpose:  This script will search for BCP podium conv and perform general tests      //
   // Input files: tests database, Shell Arg                                                      //
   // Output file: podbcp general date/timestamp                                                  //
   //                                                                                             //                
   ///////////////////////////////////////////////////////////////////////////////////////////////
  
      // init Variables and log libs
      const dotenv = require("dotenv");
      pathx = process.env.HOME + '/Projects/BCP_Tests/.env';
      dotenv.config({ path: pathx });
  
      const {By,Key,Builder, until} = require("selenium-webdriver");
      const { get } = require("selenium-webdriver/http");
      require("chromedriver");
      var mysql = require('mysql');
      const util = require('util');
      const fs = require('fs');
      const fsPromises = fs.promises;
    
      pad = "                                                                                                                                               ";
      Apperror = "N";
      badphone = "N";
      Apperrormsg = " ";
  
      // output log results file
      var dt = new Date()
      var dateString =
          dt.getFullYear() + "-" +
          ("0" + (dt.getMonth()+1)).slice(-2) + "-" +
          ("0" +  dt.getDate()).slice(-2) + " " +
          ("0" +  dt.getHours()).slice(-2) + ":" +
          ("0" +  dt.getMinutes()).slice(-2) + ":" +
          ("0" +  dt.getSeconds()).slice(-2);
  
      var dateString2 =
         dt.getFullYear() + "-" +
         ("0" + (dt.getMonth()+1)).slice(-2) + "-" +
         ("0" +  dt.getDate()).slice(-2) + " " +
         ("0" +  dt.getHours()).slice(-2) +
         ("0" +  dt.getMinutes()).slice(-2) +
         ("0" +  dt.getSeconds()).slice(-2);
  
      // sql or str
     var param_conv = process.argv[2];
     var param_test = process.argv[3];
     var param_mode = process.argv[4];


     param_conv = "PR";
     param_test = "DealerInv";
     param_mode = "Input";


     console.log("conv"),param_conv
     console.log("test",param_test);
     console.log("mode",param_mode);


      /// Input Append Output Done
  
      var logfile =  process.env.PODBCPGENRLOGFILE + dateString + '.csv';
      
      var conn = mysql.createConnection({
         host     : process.env.BCPHOST,
         user     : process.env.TESTUSER,
         password : process.env.TESTPASSWORD,
         database : process.env.TESTDATABASE});


      var conn2 = mysql.createConnection({
         host     : process.env.BCPHOST,
         user     : process.env.ONBDCUSER,
         password : process.env.ONBDCPASSWORD,
         database : process.env.ONBDCDATABASE});
  
      const query = util.promisify(conn.query).bind(conn);
      const query2 = util.promisify(conn2.query).bind(conn2);


  
      if(param_mode == "Done") {
         PriorFileOut = " ";
         updrows = await query("update tst_PodiumConv_Name set tstpodiumconvname_file = (?) where tstpodiumconvname_short = (?)",[PriorFileOut,param_conv]);
         conn.end();
         process.exit();
      }
  
      // Get Conversation
      rowuser = await query("select * from tst_PodiumConv_Name where tstpodiumconvname_short = (?)",[param_conv]);
      apitot = rowuser.length;
      if (apitot==0)  {
         console.log("Unable to find conversation in PodiumConv_Name table");
         conn.end();
         process.exit();
      }

      usersql = Object.values(rowuser[0]);
      conv_selected = usersql[2];
      PriorFileOut = usersql[3];


      // Get Podium General Info
      rowuser = await query("select * from tst_PodiumGeneral where tstpodiumgename_short = (?)",[param_conv]);
      apitot = rowuser.length;
      if (apitot==0)  {
          console.log("Unable to find in PodiumGeneral table");
          conn.end();
          process.exit();
      }
  
        usersql = Object.values(rowuser[0]);
        sqldealer = usersql[3];
        sqldealerprompt = usersql[4] + "prompt" + "-" + dateString2;;
        sqldealerresponse = usersql[4] + "response" + "-" + "-" + dateString2;;
        sqlpricelow = usersql[5];
        sqlpricehigh = usersql[6];
        sqlmileage = usersql[7];
        sqlfeatures = usersql[8];
    
      if (param_mode == "Append") {
         logfile = PriorFileOut;
      }
  
      if(param_mode == "Output") {
         PriorFileOut = logfile;
         oline = "====================================================================================================================================" + "\n";
         fs.writeFileSync(logfile,oline, function(err) {
         if(err) return console.error(err);
         });


         oline = "BCP Podium General Regression Test Run at " + dateString  + "\n";
         fs.appendFileSync(logfile, oline, function(err) {
         if(err) return console.error(err);
         });
  
         oline = "====================================================================================================================================" + "\n";
         fs.appendFileSync(logfile, oline, function(err) {
         if(err) return console.error(err);
         });
         oline = "BCP Podium Test Case           Test Data                                                                                Test Result" + "\n";
         fs.appendFileSync(logfile, oline, function(err) {
         if(err) return console.error(err);
         });
      
         oline = "====================================================================================================================================" + "\n";
         fs.appendFileSync(logfile, oline, function(err) {
         if(err) return console.error(err);
         });
      }
  
      
     //Login to OverniteBDC  
  
         // wait for browser to build and launch properly
         let driver = await new Builder().forBrowser("chrome").build();
  
         await driver.sleep(5000);
            
         //fetch from the browser
         await driver.get(process.env.ONBDCURL);
  
         await driver.sleep(5000);
  
      xp = '/html/body/section/div/div/div[2]/div/div[2]/form/div[4]/div/input[1]';
      for (var ex = 1; ex < 5; ex++) {
          try {
               await driver.sleep(5000);
               await driver.findElement(By.xpath(xp));
               await driver.findElement(By.id("loginU2")).sendKeys(process.env.SCREENUSER,Key.TAB);
               await driver.findElement(By.id("loginP2")).sendKeys(process.env.SCREENPASSWORD,Key.TAB);
               await driver.findElement(By.id("loginS2")).click();
               break;
         }
         catch(NoSuchElemntException) {
              await driver.sleep(3500);
          }
          if (ex == 4) {
             console.log("Unable to Load Application");
             conn.end();
             await driver.quit();
             process.exit();
          }
      }
      // podium url    
      t = 0;
      for (var ex = 1; ex < 5; ex++) {
            try {
               await driver.switchTo().newWindow('tab');
               await driver.sleep(5000);
               await driver.get(process.env.BCPPODIUMURL);
               await driver.navigate().refresh();
               break;
            }
            catch(NoSuchElemntException) {
               await driver.sleep(3500);
               t++;
               if (t > 5) {
                  console.log("unable to load podiun url");
                  conn.end();
                  await driver.quit();
                  process.exit();
               }
            }
      }


      try {
           await driver.manage().window().maximize();
           await driver.sleep(2500);
           xp ="//*[contains(@class,'phpdebugbar-close-btn')]";
           await driver.findElement(By.xpath(xp)).click();
      }
      catch(NoSuchElemntException) {
         await driver.sleep(500);
      }
        
      await driver.sleep(5000);
      try {
         if(param_test == "DealerScripts") {
            if(param_mode == "Input") {
               xp = "//*[contains(text(),'Dealer Scripts')]";
               element = driver.findElement(By.xpath(xp));
               driver.executeScript("arguments[0].click();", element);
               await driver.sleep(2500);
               xp ="//*[contains(@name, 'selected-dealer')]";
               await driver.findElement(By.xpath(xp)).sendKeys(sqldealer);
               await driver.sleep(2500);
               xp = "//*[contains(text(),'Script Editor')]";
               await driver.findElement(By.xpath(xp)).click();
               await driver.sleep(2500);
               xp ="//*[contains(@class, 'ql-editor ql-blank')]";
               await driver.findElement(By.xpath(xp)).sendKeys(sqldealerprompt);
               await driver.sleep(2500);
               for (var x = 1; x < 50; x++) {
                 xp = '/html/body/main/div/div/div/form/section[2]/div/div[' + x + ']/div/div[2]/div/textarea';
                 var valtxt = await driver.findElement(By.xpath(xp)).getAttribute('value');
                 if(valtxt.length == 0) {
                    break;
                 }
               }
               await driver.findElement(By.xpath(xp)).sendKeys(sqldealerresponse);
               await driver.sleep(2500);
               xp = "//*[contains(text(),'Saving will update all changes')]";
               await driver.findElement(By.xpath(xp)).click();
               await driver.sleep(2500);
               xp = "//*[contains(text(),'Podium Chat')]";
               await driver.findElement(By.xpath(xp)).click();
            }
         }
      }
      catch(NoSuchElemntException) {
            await driver.sleep(2500);
            console.log("Unable to Complete Test", param_test);
            conn.end();
            await driver.quit();
            process.exit();
      }
      
      // sel conversation
      selneeded = "Y";
      if(param_test == "DarkLight") {
         selneeded = "N";
      }
      if(param_test == "Search") {
         selneeded = "N";
      }
      if(selneeded=="Y") {
         x = 1;
         await driver.sleep(12500);
         while(true) {
            try {
               //dynamic attribute
               xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[' + x + ']/div/div[2]/div/span[2]';
               await driver.sleep(2500);
               fndconv = await driver.findElement(By.xpath(xp)).getText();
               if (fndconv == conv_selected) {
                   await driver.findElement(By.xpath(xp)).click();
                   await driver.sleep(4500);
                   break;
               }      
                   await driver.sleep(2500);
                   x++;
            }
            catch(NoSuchElemntException) {
                  console.log("Unable to Find Conversation");
                  conn.end();
                  await driver.quit();
                  process.exit();
            }
         }
      }
    
      convneeded = "N";
      arcpen = "N";


      if(param_test == "RePend") {
         if(param_mode == "Input") {
            convneeded = "Y";
            arcpen = "Y";
         }
      }
      if(param_test == "DealerScripts") {
         if(param_mode == "Input") {
            convneeded = "Y";
            
         }
      }
      if(param_test == "DealerInv") {
         if(param_mode == "Input") {
            convneeded = "Y";
            dealertest = "Failed";
         }
      }
      if(param_test == "Archive") {
         if(param_mode == "Input") {
            convneeded = "Y";
            arcpen = "Y";
         }
      }


      if(convneeded == "Y") {
         if(param_test == "RePend") {
            await driver.sleep(5000);
            await driver.findElement(By.linkText("RE-PEND")).click();
            await driver.sleep(5000);
         }
         if(param_test == "Archive") {
            await driver.sleep(5000);
            await driver.findElement(By.linkText("ARCHIVE")).click();
            await driver.sleep(5000);
         }


         if (arcpen == "Y") {
            for (var x = 1; x < 50; x++) {
              xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[' + x + ']/div/div[1]';
              try {
                    await driver.sleep(3000);
                    pentxt = await driver.findElement(By.xpath(xp)).getText();
                    await driver.sleep(1000);
                    if(param_test == "RePend") {
                       if(pentxt == "Pending") {
                          penconv = "Repend Worked";
                          break;
                       }
                    }
                    if(param_test == "Archive") {
                       if(pentxt == "Archived") {
                          penconv = "Archive Worked";
                          break;
                        }
                     }
               }
               catch(NoSuchElemntException) {
                  if(param_test == "RePend") {
                     penconv = "Repend Not Worked"
                     break;
                  }
                  if(param_test == "Archive") {
                     penconv = "Archive Not Worked"
                     break;
                  }
               }
            }
         }


         x = 1;
         await driver.sleep(12500);
         while(true) {
            try {
               xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[' + x + ']/div/div[2]/div/span[2]';
               await driver.sleep(2500);
               fndconv = await driver.findElement(By.xpath(xp)).getText();
               if (fndconv == conv_selected) {
                  await driver.findElement(By.xpath(xp)).click();
                        await driver.sleep(4500);
                        break;
               }      
               await driver.sleep(2500);
               x++;
            }
            catch(NoSuchElemntException) {
               console.log("Unable to Find Conversation");
               conn.end();
               await driver.quit();
               process.exit();
            }
         }
      }


      if(param_test == "DealerScripts") {
         if(param_mode == "Input") {
            await driver.sleep(2500);
            await driver.findElement(By.id("open-button")).click();
            await driver.sleep(2500);
            await driver.findElement(By.id("5-trigger")).click();
            for (var x = 1; x < 50; x++) {
                 xp = '/html/body/main/div/div/div/div[2]/div[2]/div[4]/div/div/section[2]/div[' + x + ']/p[2]';
                 rsptxt = await driver.findElement(By.xpath(xp)).getText();
                 if(rsptxt == sqldealerresponse) {
                    break;
                 }
            }
            await driver.findElement(By.xpath(xp)).click();
            await driver.sleep(2500);
            await driver.findElement(By.id("open-button")).click();
            await driver.sleep(2500);
            xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/button';
            await driver.sleep(7500);
         }
      }


      if(param_test == "DealerInv") {
         if(param_mode == "Input") {
            xp = "/html/body/main/div/div/div/div[2]/div[2]/div[5]/span";
            element = driver.findElement(By.xpath(xp));
            try {
                   await driver.sleep(2500);
                   driver.executeScript("arguments[0].click();", element);
                   await driver.sleep(2500);
                   await driver.findElement(By.xpath(xp)).click();
                   await driver.sleep(2500);
                }
            catch (NoSuchElemntException)
                {
                   x = 0;
                }


            await driver.findElement(By.id("min-price")).sendKeys(sqlpricelow);
            await driver.findElement(By.id("max-price")).sendKeys(sqlpricehigh);
            await driver.findElement(By.id("mileage")).sendKeys(sqlmileage);
            xp='//*[@id="inventory-search"]/ul/li[8]/input';
            await driver.findElement(By.xpath(xp)).sendKeys(sqlfeatures);
            xp =   "/html/body/main/div/div/div/div[2]/div[2]/div[5]/div[1]/button";
            await driver.findElement(By.xpath(xp)).click();
            await driver.sleep(2500);
            await driver.findElement(By.id("inventory-feed")).click();
         }
      }



      if(convneeded == "Y") {
         if(param_test == "RePend") {
            if(param_mode == "Input") {
               scrconv = penconv + "-" + dateString2;
               sqldealerresponse = scrconv;
               xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/textarea';
               await driver.sleep(4500);
               await driver.findElement(By.xpath(xp)).sendKeys(scrconv,Key.TAB);
               xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/button';
               await driver.sleep(7500);
            }
         }


         if(param_test == "Archive") {
            if(param_mode == "Input") {
               scrconv = penconv + "-" + dateString2;
               sqldealerresponse = scrconv;
               xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/textarea';
               await driver.sleep(4500);
               await driver.findElement(By.xpath(xp)).sendKeys(scrconv,Key.TAB);
               xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/button';
               await driver.sleep(7500);
            }
         }
//param_test = "DealerInv";
//param_mode = "Input";


         if(param_test == "DealerInv") {
            if(param_mode == "Input") {
               try {
                  invstr = "";
                  xp = '/html/body/main/div/div/div/div[2]/div[2]/div[5]/div[2]/ul/li[1]/div/ul/li[2]/span[1]';
                  await driver.findElement(By.xpath(xp));
                  xp = '//*[@id="feed-list"]/li/div/ul/li[2]/span[1]';
                  inv1 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv1.length > 0) {
                     invstr = invstr + inv1 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[2]/span[2]';
                  inv2 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv2.length > 0) {
                     invstr = invstr + inv2 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[3]/span[1]';
                  inv3 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv3.length > 0) {
                     invstr = invstr + inv3 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[3]/span[2]';
                  inv4 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv4.length > 0) {
                     invstr = invstr + inv4 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[4]/span[1]';
                  inv5 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv5.length > 0) {
                     invstr = invstr + inv5 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[4]/span[2]';
                  inv6 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv6.length > 0) {
                     invstr = invstr + inv6 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[5]/span[1]';
                  inv7 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv7.length > 0) {
                     invstr = invstr + inv7 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li/div/ul/li[5]/span[2]';
                  inv8 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv8.length > 0) {
                     invstr = invstr + inv8 + "^^^";
                  }
               }
               catch (NoSuchElemntException) {
                  xp = '/html/body/main/div/div/div/div[2]/div[2]/div[5]/div[2]/ul/li/div/ul/li[2]/span[1]';
                  await driver.findElement(By.xpath(xp))
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[2]/span[1]';
                  inv1 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv1.length > 0) {
                     invstr = invstr + inv1 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[2]/span[2]';
                  inv2 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv2.length > 0) {
                     invstr = invstr + inv2 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[3]/span[1]';
                  inv3 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv3.length > 0) {
                     invstr = invstr + inv3 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[3]/span[2]';
                  inv4 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv4.length > 0) {
                     invstr = invstr + inv4 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[4]/span[1]';
                  inv5 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv5.length > 0) {
                     invstr = invstr + inv5 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[4]/span[2]';
                  inv6 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv6.length > 0) {
                     invstr = invstr + inv6 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[5]/span[1]';
                  inv7 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv7.length > 0) {
                     invstr = invstr + inv7 + "^^^";
                  }
                  xp = '//*[@id="feed-list"]/li[1]/div/ul/li[5]/span[2]';
                  inv8 = await driver.findElement(By.xpath(xp)).getText();
                  if (inv8.length > 0) {
                     invstr = invstr + inv8 + "^^^";
                  }
               }
               xp = '/html/body/main/div/div/div/div[2]/div[2]/div[3]/div[1]/textarea';
               invtxt = await driver.findElement(By.xpath(xp)).getAttribute("value");


               invarray = invstr.split("^^^");
               invcnt = 0;
               for (var y = 0; y < invarray.length; y++) {
                   tempinv = invarray[y];
                   nf = "";
                   z = 0;
                   while(true) {
                      if(tempinv.substr(z,1).match("^[a-zA-Z0-9]*$")){
                         nf = nf + tempinv.substr(z,1);
                      }
                      if(tempinv.substr(z,1) == ":") {
                        nf = nf + tempinv.substr(z,1);
                     }
                     if(tempinv.substr(z,1) == "#") {
                        nf = nf + tempinv.substr(z,1);
                     }
                     if(tempinv.substr(z,1) == "-") {
                        nf = nf + tempinv.substr(z,1);
                     }
                     if(tempinv.substr(z,1) == ".") {
                        nf = nf + tempinv.substr(z,1);
                     }
                     if(tempinv.substr(z,1) == " ") {
                        nf = nf + tempinv.substr(z,1);
                     }
                     if (z > tempinv.length - 1) {
                         break;
                     }
                     z++;
                  }
                  invarray[y] = nf;
               }
                  
               for (var y = 0; y < invarray.length -1; y++) {
                  invchk = invtxt.search(invarray[y]);
                  if(invchk != -1) {
                     invcnt++;
                  }  
               }
               if (invcnt == invarray.length -1) {
                  dealertest = "Passed"
               };
            }
         }


         element = driver.findElement(By.xpath(xp));
         driver.executeScript("arguments[0].scrollIntoView(true);", element);
         await driver.sleep(4500);
         await driver.findElement(By.xpath(xp)).click();
         await driver.sleep(4500);


         tcase_key = param_test;
         rowadd = await query ("Insert Into tst_PodiumConv_Validate (tstpodiumconvval_key,tstpodiumconvval_conv,tstpodiumconvval_text,tstpodiumconvval_tester) VALUES (?,?,?,?)", [tcase_key,sqldealerresponse,sqldealerresponse,process.env.BCPKEY]);
         delscr = '%This is an Automation Script%';
         var  rowdel2 = await query2("delete from bcp_Scripts where prompt Like (?)",[delscr]);
      }
      
      if(param_test == "SendCRM") {
         if(param_mode == "Input") {
            await driver.sleep(5000);
            try {
              xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[' + x + ']/div/div[2]/div/span[5]/strong';
              oldcrm = await driver.findElement(By.xpath(xp)).getText();
            }
              catch(NoSuchElemntException) {
                    oldcrm = "0000-00-00 00:00:00"
              }
            await driver.manage().window().maximize();
            await driver.sleep(2500);
            await driver.findElement(By.className("hamburger")).click();
            await driver.sleep(2500);
            if (oldcrm == "0000-00-00 00:00:00") {
               await driver.sleep(4000);
               await driver.findElement(By.linkText("Send to CRM")).click();
               await driver.sleep(4000);


            }
            else {
               await driver.sleep(4000);
               await driver.findElement(By.partialLinkText("Resend to CRM")).click();
               await driver.sleep(4000);
            }
            await driver.sleep(4000);
            tcase_key = param_test;
            newcrm = await driver.findElement(By.xpath(xp)).getText();
            rowadd = await query ("Insert Into tst_PodiumConv_Validate (tstpodiumconvval_key,tstpodiumconvval_conv,tstpodiumconvval_text,tstpodiumconvval_tester) VALUES (?,?,?,?)", [tcase_key,newcrm,oldcrm,process.env.BCPKEY]);
            await driver.sleep(2500);
         }
      }


      if(param_mode != "Input") {
          tc_find = param_test;
          podconv = "Dealer Script Not Found or Created";
          podconv2 = " ";
          testresult = "Failed";
          // Get test cases that were selected from database    
          await driver.sleep(5000);        
          rows = await query("select * from tst_PodiumConv_Validate where tstpodiumconvval_tester = (?) And tstpodiumconvval_key = (?)",[process.env.BCPKEY,tc_find]);
          apitot = rows.length;
          if (apitot > 0)  {  
              podsql = Object.values(rows[0]);
              podconv = podsql[2];
              podconv2 = podsql[3];
          }


         outcheckneeded = "N";
         if(param_test == "DealerScripts") {
            outcheckneeded = "Y";
         }
         if(param_test == "RePend") {
            outcheckneeded = "Y";
         }
         if(param_test == "Archive") {
            outcheckneeded = "Y";
         }
          
          if(outcheckneeded == "Y") {
             if (apitot > 0)  {  
                 await driver.manage().window().maximize();
                 await driver.sleep(7500);
                 xp = '/html/body';
                 var fndconv = await driver.findElement(By.xpath(xp)).getText();
                 textcnt = fndconv.search(podconv);
                 if (textcnt != -1) {
                     testresult = "Passed";
                 }
             }
           }


           if(param_test=="RePend") {
            if (testresult == "Passed") {
                testresult = "Failed";
                textcnt = podconv.search("Repend Worked");
                if (textcnt != -1) {
                    testresult = "Passed";
                }
            }
         }


         if(param_test=="Archive") {
            if (testresult == "Passed") {
                testresult = "Failed";
                textcnt = podconv.search("Archive Worked");
                if (textcnt != -1) {
                    testresult = "Passed";
                }
            }
         }


           if(param_test == "SendCRM") {
              testresult = "Passed";
              if(podconv == podconv2) {
                 testresult = "Failed"
              }
              if (apitot==0) {
                 testresult = "Failed"
              }
              podconvx = "(New) " + podconv + " (Old) " + podconv2;
              podconv = podconvx;
           }


         if(param_test == "DarkLight") {
            chk2 = "N";
            xp = "/html/body/main/div/div/nav/div/label/span";
            await driver.sleep(2500);
            await driver.findElement(By.xpath(xp)).click();
            xp ="//*[contains(@class, 'dark')]";
            try {
                msgx = "Dark Mode Worked"
                await driver.sleep(2500);
                await driver.findElement(By.xpath(xp));
                chk2 = "Y"
            }
            catch(NoSuchElemntException) {
               msgx =  "Dark Mode Did Not Work";
            }
            if (chk2 == "Y") {
               try {
                 xp = "/html/body/main/div/div/nav/div/label/span";
                 await driver.sleep(2500);
                 await driver.findElement(By.xpath(xp)).click();
                 msgx = "Dark Mode Worked"
               }
               catch(NoSuchElemntException) {
                  msgx =  "Dark Mode Did Not Work";
               }
            }
            testresult = "Passed";
            podconv = msgx;
            if(msgx == "Dark Mode Did Not Work") {
               testresult = "Failed";
            }
         }  


         if(param_test == "Search") {
            namefnd = "N"
            dealerfnd = "N"
            await driver.sleep(2500);
            xp = '/html/body/main/div/div/div/div[1]/div/div[2]/div/input';
            await driver.findElement(By.xpath(xp)).sendKeys(process.env.VOLIEBRULESALESREP);
            await driver.sleep(2500);


            xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[1]/div/div[2]/div/span[2]'
            var fndname = await driver.findElement(By.xpath(xp)).getText();
            await driver.sleep(2500);
            if (fndname==process.env.VOLIEBRULESALESREP) {
                namefnd="Y";
            }
            await driver.sleep(2500);
            xp = '/html/body/main/div/div/div/div[1]/div/div[2]/div/button/span';
            element = driver.findElement(By.xpath(xp));
            driver.executeScript("arguments[0].scrollIntoView(true);", element);
            await driver.sleep(2500);
            await driver.findElement(By.xpath(xp)).click();
            await driver.sleep(2500);


            await driver.sleep(2500);
            xp = '/html/body/main/div/div/div/div[1]/div/div[3]/div/input';
            await driver.findElement(By.xpath(xp)).sendKeys(process.env.VOLIEORG);
            await driver.sleep(2500);


            xp = '/html/body/main/div/div/div/div[1]/div/div[4]/div[1]/div/div[2]/div/span[1]';
            var fnddealer = await driver.findElement(By.xpath(xp)).getText();  
            await driver.sleep(2500);  
            textcnt = fnddealer.search(process.env.VOLIEORG);
            if (textcnt != -1) {
               dealerfnd="Y";
            }
            xp = '/html/body/main/div/div/div/div[1]/div/div[3]/div/button/span';
            element = driver.findElement(By.xpath(xp));
            driver.executeScript("arguments[0].scrollIntoView(true);", element);
            await driver.sleep(2500);
            await driver.findElement(By.xpath(xp)).click();
            await driver.sleep(2500);
            testresult = "Failed";
            podconv = "Customer/Dealer Search Did Not Work";
            tcnt = 0;
            if(namefnd=="Y") {
               tcnt++;
            }
            if(dealerfnd=="Y") {
               tcnt++;
            }
            if(tcnt==2) {
               testresult = "Passed";
               podconv = "Customer/Dealer Search Worked";
            }
         }  


          f0 = 30 -  tc_find.length;
          if (f0 < 0) {
             f0 = 1;
          }
          f1 = 95 - podconv.length;
          if (f1 < 0) {
              f1 = 1;
          }
                                            
          // Write Test Result
          oline = tc_find + pad.substr(0,f0) + podconv + pad.substr(0,f1) + testresult + "\n";
          fs.appendFileSync(logfile, oline, function(err) {
          if(err) return console.error(err);});
       }
    
      if(param_mode == "Output") {
         updrows = await query("update tst_PodiumConv_Name set tstpodiumconvname_file = (?) where tstpodiumconvname_short = (?)",[PriorFileOut,param_conv]);
      }
    
      // Close/End Script
      conn.end();
      conn2.end();
      await driver.sleep(2500);
      await driver.quit();
      await driver.sleep(2500);
      process.exit();
    
   }
   onbdcpodiumgenbcp()